[{"C:\\Users\\Harnoor Singh\\Documents\\GitHub\\covid-tracker-react\\src\\index.js":"1","C:\\Users\\Harnoor Singh\\Documents\\GitHub\\covid-tracker-react\\src\\App.js":"2","C:\\Users\\Harnoor Singh\\Documents\\GitHub\\covid-tracker-react\\src\\util.js":"3","C:\\Users\\Harnoor Singh\\Documents\\GitHub\\covid-tracker-react\\src\\Infobox.js":"4","C:\\Users\\Harnoor Singh\\Documents\\GitHub\\covid-tracker-react\\src\\Table.js":"5","C:\\Users\\Harnoor Singh\\Documents\\GitHub\\covid-tracker-react\\src\\Map.js":"6","C:\\Users\\Harnoor Singh\\Documents\\GitHub\\covid-tracker-react\\src\\Linegraph.js":"7"},{"size":220,"mtime":1610667707714,"results":"8","hashOfConfig":"9"},{"size":4926,"mtime":1610668162972,"results":"10","hashOfConfig":"9"},{"size":2434,"mtime":1610667705744,"results":"11","hashOfConfig":"9"},{"size":1290,"mtime":1610667705593,"results":"12","hashOfConfig":"9"},{"size":466,"mtime":1610667705722,"results":"13","hashOfConfig":"9"},{"size":721,"mtime":1610668600102,"results":"14","hashOfConfig":"9"},{"size":3666,"mtime":1610667705622,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"trchzt",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"18"},"C:\\Users\\Harnoor Singh\\Documents\\GitHub\\covid-tracker-react\\src\\index.js",[],["32","33"],"C:\\Users\\Harnoor Singh\\Documents\\GitHub\\covid-tracker-react\\src\\App.js",[],"C:\\Users\\Harnoor Singh\\Documents\\GitHub\\covid-tracker-react\\src\\util.js",[],"C:\\Users\\Harnoor Singh\\Documents\\GitHub\\covid-tracker-react\\src\\Infobox.js",[],"C:\\Users\\Harnoor Singh\\Documents\\GitHub\\covid-tracker-react\\src\\Table.js",[],"C:\\Users\\Harnoor Singh\\Documents\\GitHub\\covid-tracker-react\\src\\Map.js",[],"C:\\Users\\Harnoor Singh\\Documents\\GitHub\\covid-tracker-react\\src\\Linegraph.js",["34"],"import React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport numeral from \"numeral\";\nconst options = {\n    legend: {\n        display: false,\n    },\n    elements: {\n        point: {\n            radius: 0\n        },\n    },\n    maintainAspectRatio: false,\n    tooltips: {\n        mode: \"index\",\n        intersect: false,\n        callbacks: {\n            label: function (tooltipItem, data) {\n                return numeral(tooltipItem.value).format(\"+0,0\");\n            }\n        }\n    },\n    scales: {\n        xAxes: [{\n            type: \"time\",\n            \"time\": {\n                format: \"MM/DD/YYYY\",\n                tooptipFormat: \"ll\"\n            }\n        }],\n        yAxes: [{\n            gridLines: {\n                display: false\n            },\n            ticks: {\n                callback: function (value, index, values) {\n                    return numeral(value).format(\"0a\");\n                }\n            }\n        }]\n    }\n}\nconst constructChartData = (data, caseType = \"cases\") => {\n    let chartData = [];\n    let lastDataPoint;\n\n    for (let date in data[caseType]) {\n        if (lastDataPoint) {\n            let newDataPoint = {\n                x: date,\n                y: data[caseType][date] - lastDataPoint,\n            }\n            chartData.push(newDataPoint);\n        }\n        lastDataPoint = data[caseType][date];\n    }\n    console.log(\"chartData \", chartData);\n    return chartData;\n}\nconst generateActiveCases = (data) =>{\n    let active = {};\n    for(let date in data[\"cases\"]){\n        active[date] = data[\"cases\"][date] - data[\"recovered\"][date] - data[\"deaths\"][date];\n    }\n    return active;\n}\nfunction Linegraph({ caseTypes = \"cases\" }) {\n    const [data, setData] = useState({}); \n    useEffect(() => {\n        const fetchData = async () => {\n            await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=100\")\n                .then((response) => {\n                    return response.json()\n                })\n                .then(data => {\n                    if (caseTypes === \"activecase\") {\n                        let activeCases = generateActiveCases(data);\n                        data[\"active\"] = activeCases;\n                        console.log(\"active \",data);\n                        caseTypes = \"active\";\n                      //  return;\n                    }\n                    setData(constructChartData(data, caseTypes));\n                })\n        }\n        fetchData();\n    }, [caseTypes]);\n    const lineGraphColor = {\n        cases: {\n            borderColor: \"#cc1034\",\n            backgroundColor: \"rgba(204, 16, 52, 0.5)\"\n        },\n        recovered: {\n            borderColor: \"#7dd71d\",\n            backgroundColor: \"#c3e59d\",\n        },\n        activecase: {\n            borderColor: \"#1769aa\",\n            backgroundColor: \"#4dabf5\",\n        },\n        deaths: {\n            borderColor: \"#333\",\n            backgroundColor: \"#999\",\n        }\n    }\n    return (\n        <div>\n\n            {data && Object.keys(data).length > 0 && (\n                <Line\n                    data={{\n                        datasets: [\n                            {\n                                borderColor: { caseTypes } ? lineGraphColor[caseTypes].borderColor : \"#cc1034\",\n                                backgroundColor: { caseTypes } ? lineGraphColor[caseTypes].backgroundColor : \"rgba(204, 16, 52, 0.5)\",\n                                data: data\n                            }\n                        ]\n                    }}\n                    options={options}\n                />\n            )}\n        </div>\n    )\n}\n\nexport default Linegraph\n",{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":80,"column":37,"nodeType":"41","endLine":80,"endColumn":45},"no-native-reassign",["42"],"no-negated-in-lhs",["43"],"react-hooks/exhaustive-deps","Assignments to the 'caseTypes' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Literal","no-global-assign","no-unsafe-negation"]
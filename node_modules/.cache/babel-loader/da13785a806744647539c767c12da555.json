{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Harnoor Singh\\\\Documents\\\\GitHub\\\\covid-tracker-react\\\\src\\\\Linegraph.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport numeral from \"numeral\";\nconst options = {\n  legend: {\n    display: false\n  },\n  elements: {\n    point: {\n      radius: 0\n    }\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      }\n    }\n  },\n  scales: {\n    xAxes: [{\n      type: \"time\",\n      \"time\": {\n        format: \"MM/DD/YYYY\",\n        tooptipFormat: \"ll\"\n      }\n    }],\n    yAxes: [{\n      gridLines: {\n        display: false\n      },\n      ticks: {\n        callback: function (value, index, values) {\n          return numeral(value).format(\"0a\");\n        }\n      }\n    }]\n  }\n};\n\nconst constructChartData = (data, caseType = \"cases\") => {\n  let chartData = [];\n  let lastDataPoint;\n\n  for (let date in data[caseType]) {\n    if (lastDataPoint) {\n      let newDataPoint = {\n        x: date,\n        y: data[caseType][date] - lastDataPoint\n      };\n      chartData.push(newDataPoint);\n    }\n\n    lastDataPoint = data[caseType][date];\n  }\n\n  console.log(\"chartData \", chartData);\n  return chartData;\n};\n\nconst generateActiveCases = data => {\n  let active = {};\n\n  for (let date in data[\"cases\"]) {\n    active[date] = data[\"cases\"][date] - data[\"recovered\"][date] - data[\"deaths\"][date];\n  }\n\n  return active;\n};\n\nfunction Linegraph({\n  caseTypes = \"cases\"\n}) {\n  _s();\n\n  const [data, setData] = useState({});\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=100\").then(response => {\n        return response.json();\n      }).then(data => {\n        if (caseTypes === \"activecase\") {\n          let activeCases = generateActiveCases(data);\n          data[\"active\"] = activeCases;\n          console.log(\"active \", data);\n          caseTypes = \"active\"; //  return;\n        }\n\n        setData(constructChartData(data, caseTypes));\n      });\n    };\n\n    fetchData();\n  }, [caseTypes]);\n  const lineGraphColor = {\n    cases: {\n      borderColor: \"#cc1034\",\n      backgroundColor: \"rgba(204, 16, 52, 0.5)\"\n    },\n    recovered: {\n      borderColor: \"#7dd71d\",\n      backgroundColor: \"#c3e59d\"\n    },\n    activecase: {\n      borderColor: \"#1769aa\",\n      backgroundColor: \"#4dabf5\"\n    },\n    deaths: {\n      borderColor: \"#333\",\n      backgroundColor: \"#999\"\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: data && Object.keys(data).length > 0 && /*#__PURE__*/_jsxDEV(Line, {\n      data: {\n        datasets: [{\n          borderColor: {\n            caseTypes\n          } ? lineGraphColor[caseTypes].borderColor : \"#cc1034\",\n          backgroundColor: {\n            caseTypes\n          } ? lineGraphColor[caseTypes].backgroundColor : \"rgba(204, 16, 52, 0.5)\",\n          data: data\n        }]\n      },\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Linegraph, \"tNVKLF/eI269iIOS4WygXQde5D8=\");\n\n_c = Linegraph;\nexport default Linegraph;\n\nvar _c;\n\n$RefreshReg$(_c, \"Linegraph\");","map":{"version":3,"sources":["C:/Users/Harnoor Singh/Documents/GitHub/covid-tracker-react/src/Linegraph.js"],"names":["React","useEffect","useState","Line","numeral","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","value","format","scales","xAxes","type","tooptipFormat","yAxes","gridLines","ticks","callback","index","values","constructChartData","caseType","chartData","lastDataPoint","date","newDataPoint","x","y","push","console","log","generateActiveCases","active","Linegraph","caseTypes","setData","fetchData","fetch","then","response","json","activeCases","lineGraphColor","cases","borderColor","backgroundColor","recovered","activecase","deaths","Object","keys","length","datasets"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport numeral from \"numeral\";\nconst options = {\n    legend: {\n        display: false,\n    },\n    elements: {\n        point: {\n            radius: 0\n        },\n    },\n    maintainAspectRatio: false,\n    tooltips: {\n        mode: \"index\",\n        intersect: false,\n        callbacks: {\n            label: function (tooltipItem, data) {\n                return numeral(tooltipItem.value).format(\"+0,0\");\n            }\n        }\n    },\n    scales: {\n        xAxes: [{\n            type: \"time\",\n            \"time\": {\n                format: \"MM/DD/YYYY\",\n                tooptipFormat: \"ll\"\n            }\n        }],\n        yAxes: [{\n            gridLines: {\n                display: false\n            },\n            ticks: {\n                callback: function (value, index, values) {\n                    return numeral(value).format(\"0a\");\n                }\n            }\n        }]\n    }\n}\nconst constructChartData = (data, caseType = \"cases\") => {\n    let chartData = [];\n    let lastDataPoint;\n\n    for (let date in data[caseType]) {\n        if (lastDataPoint) {\n            let newDataPoint = {\n                x: date,\n                y: data[caseType][date] - lastDataPoint,\n            }\n            chartData.push(newDataPoint);\n        }\n        lastDataPoint = data[caseType][date];\n    }\n    console.log(\"chartData \", chartData);\n    return chartData;\n}\nconst generateActiveCases = (data) =>{\n    let active = {};\n    for(let date in data[\"cases\"]){\n        active[date] = data[\"cases\"][date] - data[\"recovered\"][date] - data[\"deaths\"][date];\n    }\n    return active;\n}\nfunction Linegraph({ caseTypes = \"cases\" }) {\n    const [data, setData] = useState({}); \n    useEffect(() => {\n        const fetchData = async () => {\n            await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=100\")\n                .then((response) => {\n                    return response.json()\n                })\n                .then(data => {\n                    if (caseTypes === \"activecase\") {\n                        let activeCases = generateActiveCases(data);\n                        data[\"active\"] = activeCases;\n                        console.log(\"active \",data);\n                        caseTypes = \"active\";\n                      //  return;\n                    }\n                    setData(constructChartData(data, caseTypes));\n                })\n        }\n        fetchData();\n    }, [caseTypes]);\n    const lineGraphColor = {\n        cases: {\n            borderColor: \"#cc1034\",\n            backgroundColor: \"rgba(204, 16, 52, 0.5)\"\n        },\n        recovered: {\n            borderColor: \"#7dd71d\",\n            backgroundColor: \"#c3e59d\",\n        },\n        activecase: {\n            borderColor: \"#1769aa\",\n            backgroundColor: \"#4dabf5\",\n        },\n        deaths: {\n            borderColor: \"#333\",\n            backgroundColor: \"#999\",\n        }\n    }\n    return (\n        <div>\n\n            {data && Object.keys(data).length > 0 && (\n                <Line\n                    data={{\n                        datasets: [\n                            {\n                                borderColor: { caseTypes } ? lineGraphColor[caseTypes].borderColor : \"#cc1034\",\n                                backgroundColor: { caseTypes } ? lineGraphColor[caseTypes].backgroundColor : \"rgba(204, 16, 52, 0.5)\",\n                                data: data\n                            }\n                        ]\n                    }}\n                    options={options}\n                />\n            )}\n        </div>\n    )\n}\n\nexport default Linegraph\n"]},"metadata":{},"sourceType":"module"}